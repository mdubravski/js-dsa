The Call Stack
	- In alost all programming languages, there is a built in data structure that
	  manages what happens when function are invoked...its called the call stack!
	- Implemented using a stack data structure
		- Any time a function is invoked it is placed (pushed) on the top of the 
		 call stack.
		- When JavaScript sees the return keyword or when the function ends, the
		  compiler will remove (pop)
	- When we write recursive functions, we keep pushing new functions onto the call stack

How Recursive Functions Work
  - Invoke the same function with a different input until you reach your base case!

Base Case
  - The condition when the recursion ends

Two essential parts of a recursive function
  1. Base Case
  2. Different Input

Common Recursion Pitfalls
  1. no base case / wrong base case
  2. forgetting to return / returning the wrong thing 
  3. stack overflow!
 
Helper Method Recursion

function outer(inner){
 let outerScopedVariable = []

 function helper(helperInput){
    // modify the outerScopedVariable
    helper(helperInput--)
 }

 helper(input)

 return outScopedVariable
}

Pure Recursion
  - function is self contained and ds not rely on external data structure
  - For arrays, use methods like slice, the spread operator, and concat that make
    copies of arrays so you do not mutate them.
  - For strings, remember that strings are immutable so you will need to use methods like
    slice, substr, or substring to make copies of strings
  - To make copies of objects use Object.assign, ot the spread operator












